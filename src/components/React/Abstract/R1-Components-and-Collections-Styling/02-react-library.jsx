import reactHero from './img/2f178c5b-9b6f-4427-8589-db53696c610dimage.png';
import browserDom from './img/fdf1b945-f72c-40bb-a12d-36925e6b6a41image.png';
import algorytm from './img/7062c188-d356-4b70-bd23-e7721ebc5232image.png';
import diffing from './img/f367ae64-ce26-49b3-b818-8b8cb775972aimage.png';
import opti from './img/30009017-b907-455d-9b0c-29e1f516f8f0image.png';

import css from '../../../../components/Layout.module.css';

const ReactLibrary = () => {
  return (
    <div>
      <h1>Бібліотека React</h1>

      <img src={reactHero} alt="react Haro" width="420" />
      <p>
        React – це бібліотека для створення елементів інтерфейсу користувача. У
        React немає вбудованої маршрутизації, HTTP-модуля тощо. Проте є багата
        екосистема, яка дозволить вирішити будь-яке завдання.
      </p>
      <p>
        При створенні застосунку з використанням React розробник не взаємодіє
        безпосередньо з DOM-деревом. Його завдання – описати інтерфейс за
        допомогою компонентів (шаблон) та керувати зміною даних (модель). React,
        при зміні даних моделі, сам оновить інтерфейс за шаблоном.
      </p>
      <p>
        React – мультиплатформний, розмітку можна рендерити на сервері (
        <a href="https://nextjs.org/">Next.js</a>), писати нативні (
        <a href="https://reactnative.dev/">React Native</a> ) або десктопні (
        <a href="https://www.electronjs.org/">Electron</a> ) застосунки.
      </p>
      <h2>Browser DOM і Virtual DOM</h2>
      <p>
        <b>Browser DOM </b> – деревоподібне представлення HTML-документа, де
        кожен елемент документа представлений у вигляді DOM-вузла. Зберігається
        в браузері і безпосередньо пов'язаний з тим, що ми бачимо на сторінці.
      </p>
      <p>
        З кожною зміною DOM браузер виконує кілька трудомістких операцій. Часті
        операції оновлення такого дерева негативно впливають на продуктивність
        та реакцію інтерфейсу. Тому він повільний, та оновлювати його необхідно
        ефективно.
      </p>
      <img src={browserDom} alt="Browser DOM і Virtual DOM" width="960" />
      <p>
        <b>Virtual DOM</b> – абстракція, легковагова копія реального DOM-дерева
        у вигляді JSON-документа.
      </p>
      <ul className={css.sectionList}>
        <li>Існує тільки в пам'яті і не рендериться в браузері</li>
        <li>Не залежить від внутрішньої імплементації браузера</li>
        <li>Використовує найкращі практики оновлення реального DOM</li>
        <li>Збирає оновлення в групи для оптимізації рендеру (batching)</li>
      </ul>
      <h2>Алгоритм оновлення DOM</h2>
      <p>
        У React кожен елемент інтерфейсу – це компонент (кастомний або
        вбудований), який залежить від пропсів або стану, і представлений
        вузлами віртуального DOM-дерева. Взаємодія користувача з інтерфейсом
        змінює стан застосунку.
      </p>
      <img src={algorytm} alt="Алгоритм оновлення DOM" width="820" />
      <p>
        У разі зміни компонента створюється нове віртуальне DOM-дерево. Далі,
        використовуючи breadth-first алгоритм, відбувається порівняння
        (диференціювання, diffing) двох віртуальних дерев – до та після
        оновлення.
      </p>
      <img src={diffing} alt="" width="720" />
      <p>
        Червоні вузли представляють елементи, які змінилися. Обчислюється
        різниця між попередньою та новою версією віртуального DOM-дерева.
        Застосовується оптимальний варіант внесення змін до реального DOM. Це
        гарантує, що в реальному DOM-дереві провадиться мінімальна кількість
        оновлень, тим самим підвищуючи продуктивність інтерфейсу.
      </p>
      <img src={opti} alt="" width="720" />
    </div>
  );
};

export default ReactLibrary;
